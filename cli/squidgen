<?php

include ('api.1984tech.php');
$tech = new OrwellWorld();
$squidCA = ('
-----BEGIN PRIVATE KEY-----
MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAN/7Ghjf1XnBKh5N
FR70eaGobv31/7a3ISl8WuxjuzMcxeH2CWcV57IbPltAM9w19Sw5cgw6pkosFTWO
ScT19l2aTqBjyU0UuP0qIEMaD2S/wzN6d1iY1lBDrxLIir3fkLVxLrNw7YY5Du/T
oyh2D92lAgqBHcppao1R2YGAlcrFAgMBAAECgYBj9kxqZ5N92HD0vxA7FX8nX+XR
YDX1FPwu6LonoEcPA7tpIoaFxGf4vGHzFc9Pa6F1UFoPDSnkFpKMqWlRBzkhLVJs
e8VzDQcv/0oZtbIki7+Aih2QXufw2AFYVeiKxgjNBEP9uNRXvNw2v+Z0qBkio4G9
Xww5fFNK+gHFDNvcAQJBAPw+KUKwNf9og7av6XE7c0YZ1mYkYDOjX0r26BO/AoUu
/a8ZFq5SSsCpsjOXmXIMZWLW8ANU7LV1gw8T1+rcB8UCQQDjUSx+3QqQJxe5zr7J
cxPzuP4wVvmC8h95RgX4VKhhqKEtIGv1Sonj7aaeT3SGpT5LUfKm8S8Pj+ctrlP0
S+cBAkEAtpUQLLN8AopWfNBMe6f6ws1FAd5mvDoPaiXayyBB5MGk4y+X2Uq7zUWI
NgwQCBus76SBSwgX5ylOWoWUju4BuQJBAIJwA95QLE2HgR/HuMaT2DEUSBeo8Mfo
85J9UdOrkGtpfgMNBaXdPb6ikedppG3WyCYkQd71qpF9e6RE0jvuigECQQCO9nhL
zxqabzkkwbsxaR+A7Ut1sqKmQeKpwu3unmvynhlpgsea1EoMp2D9HL1tI6alR0PR
/Sy6XimligpwSNUc
-----END PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
MIICyDCCAjGgAwIBAgIJAP8TzwhQe9xfMA0GCSqGSIb3DQEBBQUAMH0xCzAJBgNV
BAYTAlVBMRAwDgYDVQQIDAdVa3JhaW5lMREwDwYDVQQKDAgxOTg0VEVDSDERMA8G
A1UECwwIMTk4NFRFQ0gxETAPBgNVBAMMCDE5ODR0ZWNoMSMwIQYJKoZIhvcNAQkB
FhRhcHVfYWRtaW5AYXB1Lmdvdi51YTAeFw0xNzA1MjUxOTQzNTFaFw0yNzA1MjMx
OTQzNTFaMH0xCzAJBgNVBAYTAlVBMRAwDgYDVQQIDAdVa3JhaW5lMREwDwYDVQQK
DAgxOTg0VEVDSDERMA8GA1UECwwIMTk4NFRFQ0gxETAPBgNVBAMMCDE5ODR0ZWNo
MSMwIQYJKoZIhvcNAQkBFhRhcHVfYWRtaW5AYXB1Lmdvdi51YTCBnzANBgkqhkiG
9w0BAQEFAAOBjQAwgYkCgYEA3/saGN/VecEqHk0VHvR5oahu/fX/trchKXxa7GO7
MxzF4fYJZxXnshs+W0Az3DX1LDlyDDqmSiwVNY5JxPX2XZpOoGPJTRS4/SogQxoP
ZL/DM3p3WJjWUEOvEsiKvd+QtXEus3DthjkO79OjKHYP3aUCCoEdymlqjVHZgYCV
ysUCAwEAAaNQME4wHQYDVR0OBBYEFK6nt3LvFOZ6R+b8JxgV/mTs0sB1MB8GA1Ud
IwQYMBaAFK6nt3LvFOZ6R+b8JxgV/mTs0sB1MAwGA1UdEwQFMAMBAf8wDQYJKoZI
hvcNAQEFBQADgYEAHRXF1YQMtpLyEg/pmxyIN/n3GoaqUFKuP8oyCJRspYB5fPKD
s00UOlyoH9Tvig4pnoCN/FiTdbQge7W6/2NTvSabF4Yf3XaQZUNqRbazJNXrOajg
IIOr0nePEA8ur1vGUco5q7zKnjwAnWdOa1YuKlwchJ5ZboOAoHeF/rc/yLw=
-----END CERTIFICATE-----
');
$squid_config = ('
#
# Recommended minimum configuration:
#

acl SSL_ports port 443
acl Safe_ports port 80          # http
acl Safe_ports port 443         # https
acl CONNECT method CONNECT

acl 1984tech url_regex "' . $tech->SquidPath . '/1984tech.conf"
http_access deny 1984tech
deny_info ERR_1984TECH 1984tech

#
# Recommended minimum Access Permission configuration:
#
# Deny requests to certain unsafe ports
http_access deny !Safe_ports

# Deny CONNECT to other than secure SSL ports
http_access deny CONNECT !SSL_ports

# Only allow cachemgr access from localhost
http_access allow localhost manager
http_access allow ALL
http_access deny manager
http_access deny to_localhost

# Squid normally listens to port 3128
http_port 127.0.0.1:3128 intercept options=NO_SSLv3:NO_SSLv2

# указываем HTTPS порт с нужными опциями
https_port 127.0.0.1:3129 intercept ssl-bump options=ALL:NO_SSLv3:NO_SSLv2 connection-auth=off cert=' . $tech->SquidPath . '/squidCA.pem

always_direct allow all
sslproxy_cert_error allow all
sslproxy_flags DONT_VERIFY_PEER

#укажем правило со списком блокируемых ресурсов (в файле домены вида .domain.com)
acl blocked ssl::server_name_regex "' . $tech->SquidPath . '/1984tech.conf"
acl step1 at_step SslBump1
ssl_bump peek step1

#терминируем соединение, если клиент заходит на запрещенный ресурс
ssl_bump terminate blocked
ssl_bump splice all

# Leave coredumps in the first cache dir
coredump_dir /var/squid/cache
');


//need at least 1 command line argument
if ($argc >= 2) {
    $allowedOptions = array(
        '--preview' => 'preview config file for Squid to stdout',
        '--list' => 'list loaded domains',
        '--print-pem' => 'Print SSL pem head data that need for Squid',
        '--generate' => 'generate comfig file on filesystem for Squid',
        '--help' => 'show small help'
    );

    $option = $argv[1];
    if (isset($allowedOptions[$option])) {

        switch ($option) {
            case '--preview':
                print($tech->getSquidConfig());
                break;
            case '--list':
                print($tech->renderDomainsRaw());
                break;
            case '--print-pem':
                $cert = openssl_x509_read( $squidCA );
                print (openssl_x509_parse($cert)['name']  . PHP_EOL);
                break;
            case '--generate':
                $generationResult = $tech->saveSquid();
                if (!empty($generationResult)) {
                    print('Squid 1984tech.conf ' . $generationResult . ' saved' . PHP_EOL);
                } else {
                    print('Squid 1984tech.conf skipped because DNS_ZONES option empty' . PHP_EOL);
                }
                break;
            case '--generate-unbound':
                $generationResult = $tech->saveUnboundZones();
                if (!empty($generationResult)) {
                    print('Zones file ' . $generationResult . ' saved' . PHP_EOL);
                } else {
                    print('Squid 1984tech.conf generation skipped because DNS_ZONES option empty' . PHP_EOL);
                }
                break;
            case '--help':
                print('Usage: php cli/squidgen --option' . PHP_EOL);
                print('Available options:' . PHP_EOL);
                if (!empty($allowedOptions)) {
                    foreach ($allowedOptions as $optionName => $optionDesc) {
                        print($optionName . ' - ' . $optionDesc . PHP_EOL);
                    }
                }
                break;
        }
    } else {
        print('Unknown command line option: ' . $option . PHP_EOL);
    }
} else {
    //option requirement notification
    print('At least one option required.' . PHP_EOL);
    print('Usage: php cli/squidgen --option' . PHP_EOL);
    print('For example: php cli/squidgen --help' . PHP_EOL);
}
?>
